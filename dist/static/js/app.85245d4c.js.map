{"version":3,"sources":["webpack:///./src/utils/badge.ts","webpack:///./src/index.tsx","webpack:///./src/App.tsx","webpack:///./src/utils/icon.ts","webpack:///./src/constants/entityTypes.ts","webpack:///./src/constants/blockTypes.ts","webpack:///./src/utils/draftHelpers.ts","webpack:///./src/utils/draftModifiers.ts","webpack:///./src/utils/commonUtils.ts","webpack:///./src/utils/draftConverter.tsx","webpack:///./src/utils/context.ts","webpack:///./src/utils/EventEmitter.ts","webpack:///./src/components/EditorControl/EditorControlButton.tsx","webpack:///./src/components/EditorControl/EditorControlSeparator.tsx","webpack:///./src/constants/editorControlItems.ts","webpack:///./src/components/EditorControl/EditorControlToolBar.tsx","webpack:///./src/utils/validator.ts","webpack:///./src/components/Modal/LinkModal.tsx","webpack:///./src/utils/reactUtils.ts","webpack:///./src/HOC/withEditorState.tsx","webpack:///./src/components/Portal/Portal.tsx","webpack:///./src/HOC/withPortal.tsx","webpack:///./src/components/LinkPopover/LinkPopover.tsx","webpack:///./src/plugins/common/beforeInputPlugin.ts","webpack:///./src/constants/keyCode.ts","webpack:///./src/plugins/common/keyBindingPlugin.ts","webpack:///./src/plugins/Divider/Divider.tsx","webpack:///./src/plugins/Divider/DividerPlugin.ts","webpack:///./src/plugins/Link/Link.tsx","webpack:///./src/plugins/Link/LinkPlugin.tsx","webpack:///./src/plugins/Image/ImageCaptionInput.tsx","webpack:///./src/plugins/Image/Image.tsx","webpack:///./src/HOC/withBlockProps.tsx","webpack:///./src/utils/draftPlugins.ts","webpack:///./src/plugins/Image/ImagePlugin.ts","webpack:///./src/plugins/common/commandReturnPlugin.ts","webpack:///./src/plugins/common/shiftReturnPlugin.ts","webpack:///./src/plugins/common/normalReturnPlugin.ts","webpack:///./src/plugins/common/headerPlugin.ts","webpack:///./src/plugins/common/codeBlockPlugin.tsx","webpack:///./src/plugins/common/clearFormatPlugin.ts","webpack:///./src/components/MyEditor/MyEditor.tsx"],"names":["_ref3","title","content","INFO_BGC","SUCCESS_BGC","base","_ref","backgroundColor","args","concat","_console","window","console","log","apply","arguments","ReactDOM","react","App","document","getElementById","process","_ref2","info","initIcon","hot","module","react__WEBPACK_IMPORTED_MODULE_5__","className","_components_MyEditor_MyEditor__WEBPACK_IMPORTED_MODULE_7__","React","__webpack_require__","d","__webpack_exports__","_fortawesome_fontawesome_svg_core__WEBPACK_IMPORTED_MODULE_0__","_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_1__","library","add","faBold","faItalic","faUnderline","faStrikethrough","faHighlighter","faCode","faQuoteLeft","faListUl","faListOl","faLink","faImage","faMinus","faWrench","DIVIDER_ENTITY_TYPE","LINK_ENTITY_TYPE","IMAGE_ENTITY_TYPE","IMAGE_CAPTION_ENTITY_TYPE","ATOMIC_BLOCK_TYPE","isInBlockEnd","block","selection","length","getLength","blockKey","getKey","startKey","getStartKey","endKey","getEndKey","endOffset","getEndOffset","selectionInMultiBlock","inEnd","isCollapsed","getCurrentBlock","editorState","getSelection","getCurrentContent","getBlockForKey","getControlButtonDisable","result","inlineDisabled","blockDisabled","linkDisabled","entityDisabled","clearFormatDisabled","blockType","RichUtils","getCurrentBlockType","getAnchorKey","getFocusKey","isCursorBetweenLink","getType","offset","getFocusOffset","entityKey","getEntityAt","entity","getEntity","url","getData","getEntitySelection","newSelection","SelectionState","anchorKey","focusKey","findEntityRanges","character","start","end","merge","anchorOffset","focusOffset","addLink","contentState","createEntity","getLastCreatedEntityKey","newContentState","Modifier","replaceText","undefined","EditorState","push","editLink","entitySelection","draftHelpers","editorStateWithSelection","forceSelection","newOffset","getAnchorOffset","removeLink","toggleLink","addImage","src","caption","extraData","objectWithoutProperties_default","objectSpread_default","newEditorState","AtomicBlockUtils","insertAtomicBlock","getSelectionAfter","editImage","data","mergeEntityData","insertUnstyledParagraph","withSplitContent","splitBlock","unstyledBlockKey","getKeyAfter","unstyledSelection","createEmpty","unstyledContent","setBlockType","removeInlineStyle","keys_default","DefaultDraftInlineStyle","reduce","_contentState","inlineStyle","resetBlockType","type","blockMap","getBlockMap","newBlock","text","mergeDeep","set","selectionAfter","clearFormat","blockTypeRemovedContent","selectedBlockMapSeq","toKeyedSeq","skipUntil","v","k","takeUntil","Immutable","defineProperty_default","get","map","newBlockMap","removeBlockType","quoteReg","transformBlockQuote","html","replace","match","p","getShortcut","shortcut","navigator","test","userAgent","REGEX_LF","isImagePackage","node","classList","contains","isImageCaption","EditorStateContext","readOnly","EventEmitter","classCallCheck_default","this","all","isStop","handler","includes","filter","_handler","_len","Array","_key","forEach","baseClass","EditorControlButton","handleClick","_this$props","_this","props","disabled","command","onCommand","isFunction_default","getButton","_classNames","_this$props2","label","icon","active","btnClass","classNames","role","tabIndex","aria-pressed","aria-disabled","onClick","index_es","_this$props3","tooltip","EditorControlSeparator","INLINE_STYLES","styleType","BLOCK_TYPES","EditorControlToolBar","preventDefault","e","_getControlButtonDisa","currentStyle","getCurrentInlineStyle","onMouseDown","style","EditorControlButton_EditorControlButton","key","has","EditorControlSeparator_EditorControlSeparator","simplePattern","SIMPLE_URL_REG","RegExp","SIMPLE_URL_PREFIX_REG","URL_QUERY_REG","isUrl","query","LinkModal","possibleConstructorReturn_default","getPrototypeOf_default","call","handleLinkInputMount","inputComponent","defaultTitle","defaultUrl","setState","input","select","handleOk","_this$state","state","onOk","handleCancel","onCancel","clear","handleTitleChange","target","value","handleUrlChange","visible","_this$state2","urlIsValid","modal","width","afterClose","okButtonProps","centered","destroyOnClose","placeholder","onChange","marginBottom","prefix","es_icon","onPressEnter","ref","defaultProps","WrapperComponent","_class","_temp","getComponentName","c","displayName","name","Portal","container","createContainer","removeContainer","getContainer","forceUpdate","parentNode","removeChild","createPortal","children","withPortal","_React$PureComponent","inherits_default","createClass_default","Portal_Portal","LinkPopover","createElement","body","appendChild","renderedOnce","toolbar","stopPropagation","handleRemoveLink","onRemoveLink","handleEditLink","onEditLink","position","nextProps","ret","_this2","slice","element","href","rel","common_beforeInputPlugin","pluginMethods","isReset","initialize","t","assign_default","handleBeforeInput","inputString","setEditorState","insertText","draftModifiers","blockText","getText","handleCommand","getEditorState","undo","keyCode","LEFT","UP","RIGHT","DOWN","TAB","CAP","SHIFT","CTRL","ALT","COMMAND","WIN","BACKSPACE","DELETE","SPACE","ENTER","ESC","PAGE_UP","PAGE_DOWN","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","BLOCK","INLINE","common_keyBindingPlugin","keyBindingFn","metaKey","KeyBindingUtil","isOptionKeyCommand","ctrlKey","altKey","shiftKey","hasCommandModifier","getDefaultKeyBinding","startsWith","toggleInlineStyle","toggleBlockType","lastBlock","handleKeyCommand","Divider","wrapperClass","createDividerPlugin","decorator","dividerComponent","addDivider","blockRendererFn","component","editable","Link","entityData","linkStrategy","contentBlock","callback","linkPlugin","decorators","strategy","Link_Link_Link","ImageCaptionInput","inputRef","onBlur","onKeyDown","CAPTION_MIN_HEIGHT","Image","withBlockProps","blockProps","extends_default","captionInput","getPosition","_captionElement$getBo","getBoundingClientRect","height","top","left","pageYOffset","pageXOffset","adjustCaptionHeight","captionInputElement","captionElement","Math","max","scrollHeight","startEditCaption","setReadOnly","_this$props$data$capt","isCaptionEditing","captionPosition","captionInputValue","requestAnimationFrame","focus","editCaption","endEditCaption","_ref$save","save","_ref$focus","nextBlockKey","nextBlockLength","hasFocus","handleCaptionClick","handleCaptionInputBlur","handleCaptionInputKeyDown","pressEnter","pressESC","_this$props2$data","_this$props2$data$cap","isFocused","imageClass","captionClass","editor-image-caption-editing","editor-image-caption-is-placeholder","alt","ImageCaptionInput_ImageCaptionInput","withEditorState","Consumer","context","createPlugins","ImageComponent","focusPlugin","createFocusPlugin","theme","focused","unfocused","focusDecorator","composeDecorators","dividerPlugin","createLinkPlugin","imagePlugin","beforeInputPlugin","createBeforeInputPlugin","keyBindingPlugin","createKeyBindingPlugin","commandReturnPlugin","handleReturn","shiftReturnPlugin","insertSoftNewline","normalReturnPlugin","handleValue","headerPlugin","blockRenderMap","Map","header-four","aliasedElements","header-five","header-six","codeBlockPlugin","code-block","wrapper","blockStyleFn","handlePastedText","clearFormatPlugin","createClearFormatPlugin","styleMap","CODE","fontFamily","padding","wordWrap","MyEditor","emitter","editor","plugins","current","onEditorChange","isEdit","currentLinkEntityKey","handleChange","cb","onTab","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","next","done","plugin","isEventHandled","err","return","openLinkModal","linkModalVisible","closeLinkModal","focusAfterClose","addOrEditLink","showBlockTypeAndInlineStyle","toJS","logState","convertToRaw","hasText","IMAGE_CAPTION_ENTITY_HTML","genKey","Date","convertToHTML","styleToHTML","blockToHTML","empty","nest","entityToHTML","originalText","contentStateToHtml","rawHtml","htmlWithoutBr","convertFromHTML","htmlToStyle","nodeName","parentElement","tagName","remove","htmlToBlock","lastList","inBlock","htmlToEntity","querySelector","captionEl","textContent","innerText","fuck","htmlToContentState","createWithContent","on","off","linkEntityInfo","linkModalValue","_start","_end","getEntityRange","getStartOffset","containerClass","editor-container","editor-container-hide-placeholder","getFirstBlock","Provider","EditorControlToolBar_EditorControlToolBar","lib_default","a","customStyleMap","spellCheck","LinkPopover_LinkPopover_LinkPopover","LinkModal_LinkModal","margin","marginLeft","es_button"],"mappings":"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","file":"static/js/app.85245d4c.js","sourcesContent":["// 用于在浏览器控制台输出badge图标\n\ninterface BadgeParams {\n  title: string;\n  content: string;\n}\n\ninterface LoggerParams extends BadgeParams {\n  backgroundColor: string;\n}\n\nconst TITLE_BGC = '#606060';\nconst INFO_BGC = '#1475b2';\nconst SUCCESS_BGC = '#42c02e';\nconst WARNING_BGC = '#fa0';\nconst ERROR_BGC = '#f50';\n\nconst logger = (...args: string[]): void => {\n  // 跑测试时不进行console.log\n  if (process.env.NODE_ENV === 'test') {\n    return;\n  }\n  if (window.console && typeof window.console.log === 'function') {\n    console.log(...args);\n  }\n};\n\nconst base = ({ title, content, backgroundColor }: LoggerParams): string[] => {\n  const args = [\n    `%c ${title} %c ${content} `,\n    `padding: 1px; border-radius: 3px 0 0 3px; color: #fff; background: ${TITLE_BGC};`,\n    `padding: 1px; border-radius: 0 3px 3px 0; color: #fff; background: ${backgroundColor};`,\n  ];\n  logger(...args);\n  return args;\n};\n\n// 在控制台中log不同种类的badge\nexport function info({ title, content }: BadgeParams): string[] {\n  return base({\n    title,\n    content,\n    backgroundColor: INFO_BGC,\n  });\n}\n\nexport function success({ title, content }: BadgeParams): string[] {\n  return base({\n    title,\n    content,\n    backgroundColor: SUCCESS_BGC,\n  });\n}\n\nexport function warning({ title, content }: BadgeParams): string[] {\n  return base({\n    title,\n    content,\n    backgroundColor: WARNING_BGC,\n  });\n}\n\nexport function error({ title, content }: BadgeParams): string[] {\n  return base({\n    title,\n    content,\n    backgroundColor: ERROR_BGC,\n  });\n}\n","// polyfill\nimport '@babel/polyfill';\nimport 'core-js/fn/string/trim-left';\nimport 'core-js/fn/string/trim-right';\nimport 'raf/polyfill';\n\n// start\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n// 如果用了ant-design，就可以先不引入normalize.css\n// import 'normalize.css';\nimport 'draft-js/dist/Draft.css';\nimport './style/index.scss';\n\n// components\nimport App from './App';\n\n// utils\nimport { info, success } from './utils/badge';\n\n// render\nReactDOM.render(<App/>, document.getElementById('root'));\n// window.__REACT__ = React; // eslint-disable-line no-underscore-dangle\n\n// add log badge\nsuccess({ title: 'Environment', content: process.env.NODE_ENV as string });\ninfo({ title: 'Version', content: process.env.VERSION as string });\n","import * as React from 'react';\nimport { hot } from 'react-hot-loader';\nimport MyEditor from './components/MyEditor/MyEditor';\nimport { initIcon } from './utils/icon';\nimport './App.scss';\n\ninitIcon();\n\n// hmr\n@hot(module)\nexport default class App extends React.PureComponent {\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    return (\n      <div className={'app'}>\n        <p>rich text editor with draft.js</p>\n        <MyEditor/>\n      </div>\n    );\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faBold,\n  faItalic,\n  faUnderline,\n  faStrikethrough,\n  faHighlighter,\n  faCode,\n  faQuoteLeft,\n  faListUl,\n  faListOl,\n  faLink,\n  faImage,\n  faMinus,\n  faWrench,\n} from '@fortawesome/free-solid-svg-icons';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function initIcon(): void {\n  // 按需添加icon\n  library.add(\n    faBold,\n    faItalic,\n    faUnderline,\n    faStrikethrough,\n    faHighlighter,\n    faCode,\n    faQuoteLeft,\n    faListUl,\n    faListOl,\n    faLink,\n    faImage,\n    faMinus,\n    faWrench,\n  );\n}\n","export const DIVIDER_ENTITY_TYPE = 'divider';\nexport const LINK_ENTITY_TYPE = 'link';\nexport const IMAGE_ENTITY_TYPE = 'image';\nexport const IMAGE_CAPTION_ENTITY_TYPE = 'image-caption'; // caption-entity是一个虚拟的entity，不显示任何内容\n","/* eslint-disable import/prefer-default-export */\nexport const ATOMIC_BLOCK_TYPE = 'atomic';\n","// 这里提供一些draft相关的通用方法\nimport { ContentBlock, EditorState, RichUtils, SelectionState } from 'draft-js';\nimport { LINK_ENTITY_TYPE } from '../constants/entityTypes';\nimport { ATOMIC_BLOCK_TYPE } from '../constants/blockTypes';\n\n/**\n * 判断光标是否在block的末尾\n * @param block {ContentBlock}\n * @param selection {SelectionState}\n * @return {boolean}\n */\nexport const isInBlockEnd = (block: ContentBlock, selection: SelectionState): boolean => {\n  const length = block.getLength();\n  const blockKey = block.getKey();\n  const startKey = selection.getStartKey();\n  const endKey = selection.getEndKey();\n  const endOffset = selection.getEndOffset();\n\n  // 如果选中的不是该block，则直接返回false\n  if (selection.getStartKey() !== blockKey) {\n    return false;\n  }\n\n  // 选中了多个block，则返回true\n  const selectionInMultiBlock = startKey !== endKey;\n  // 光标在block的末尾，且selection重合\n  const inEnd = length === endOffset && selection.isCollapsed();\n\n  return selectionInMultiBlock || inEnd;\n};\n\n/**\n * 获取当前光标所在的block\n * @param editorState {EditorState}\n * @return {ContentBlock}\n */\nexport const getCurrentBlock = (editorState: EditorState): ContentBlock => {\n  const selection = editorState.getSelection();\n  return editorState.getCurrentContent().getBlockForKey(selection.getStartKey());\n};\n\n/**\n * 获取当前状态下，编辑器控制按钮的disable status\n * @param editorState {EditorState}\n * @return {{\n * inlineDisabled: boolean,\n * blockDisabled: boolean,\n * linkDisabled: boolean,\n * entityDisabled: boolean,\n * clearFormatDisabled: boolean\n * }}\n */\nexport const getControlButtonDisable = (\n  editorState: EditorState,\n): {\n  inlineDisabled: boolean;\n  blockDisabled: boolean;\n  linkDisabled: boolean;\n  entityDisabled: boolean;\n  clearFormatDisabled: boolean;\n} => {\n  const result = {\n    inlineDisabled: false,\n    blockDisabled: false,\n    linkDisabled: false,\n    entityDisabled: false,\n    clearFormatDisabled: false,\n  };\n  const selection = editorState.getSelection();\n  const blockType = RichUtils.getCurrentBlockType(editorState);\n  if (blockType === ATOMIC_BLOCK_TYPE) {\n    result.inlineDisabled = true;\n    result.blockDisabled = true;\n    result.linkDisabled = true;\n    result.entityDisabled = true;\n    result.clearFormatDisabled = true;\n  }\n  if (blockType === 'code-block') {\n    result.inlineDisabled = true;\n    result.linkDisabled = true;\n    result.entityDisabled = true;\n  }\n  // 选择不同的block，禁止插入Link\n  if (selection.getAnchorKey() !== selection.getFocusKey()) {\n    result.linkDisabled = true;\n  }\n  return result;\n};\n\n/**\n * 判断光标是否在Link内\n * @param editorState {EditorState}\n * @return\n */\nexport const isCursorBetweenLink = (\n  editorState: EditorState,\n): {\n  blockKey: string;\n  entityKey: string;\n  url: string;\n} | null => {\n  let result = null;\n  const content = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const block = getCurrentBlock(editorState);\n\n  if (!block) {\n    return result;\n  }\n\n  if (block.getType() !== ATOMIC_BLOCK_TYPE && selection.isCollapsed()) {\n    const offset = selection.getFocusOffset();\n    const entityKey = block.getEntityAt(offset) || block.getEntityAt(offset - 1);\n    if (entityKey) {\n      const entity = content.getEntity(entityKey);\n      const blockKey = block.getKey();\n      if (entity.getType() === LINK_ENTITY_TYPE) {\n        result = {\n          blockKey,\n          entityKey,\n          url: entity.getData().url,\n        };\n      }\n    }\n  }\n\n  return result;\n};\n\n/**\n * 获取entityKey对应entity的SelectionState\n * @param editorState {EditorState}\n * @param blockKey {string}\n * @param entityKey {string}\n * @return {SelectionState}\n */\nexport const getEntitySelection = (\n  editorState: EditorState,\n  blockKey: string,\n  entityKey: string,\n): SelectionState => {\n  const content = editorState.getCurrentContent();\n  const block = content.getBlockForKey(blockKey);\n  let newSelection: SelectionState = new SelectionState({\n    anchorKey: blockKey,\n    focusKey: blockKey,\n  });\n  block.findEntityRanges(\n    character => character.getEntity() === entityKey,\n    (start, end) => {\n      // 选中entity\n      // @ts-ignore\n      newSelection = newSelection.merge({\n        anchorOffset: start,\n        focusOffset: end,\n      });\n    },\n  );\n  return newSelection;\n};\n\n/**\n * 获取entity的range及text\n * @param editorState {EditorState}\n * @param blockKey {string}\n * @param entityKey {string}\n * @return {{start,end,text}}\n */\nexport const getEntityRange = (\n  editorState: EditorState,\n  blockKey: string,\n  entityKey: string,\n): {\n  start: number;\n  end: number;\n  text: string;\n} => {\n  const content = editorState.getCurrentContent();\n  const block = content.getBlockForKey(blockKey);\n  let start = 0;\n  let end = 0;\n  let text = '';\n  block.findEntityRanges(\n    character => character.getEntity() === entityKey,\n    (_start, _end) => {\n      start = _start;\n      end = _end;\n      text = block.getText().slice(start, end);\n    },\n  );\n  return {\n    start,\n    end,\n    text,\n  };\n};\n\n/**\n * 获取linkModal的默认props\n * @param editorState {EditorState}\n * @param entityKey {string}\n * @return {{defaultTitle,defaultUrl?} | null}\n */\nexport const getLinkModalDefaultValue = (\n  editorState: EditorState,\n  entityKey?: string,\n): {\n  defaultTitle: string;\n  defaultUrl?: string;\n} | null => {\n  const content = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const block = getCurrentBlock(editorState);\n  const blockKey = block.getKey();\n\n  if (entityKey) {\n    const { url } = content.getEntity(entityKey).getData();\n    const { text } = getEntityRange(editorState, blockKey, entityKey);\n    return {\n      defaultTitle: text,\n      defaultUrl: url,\n    };\n  }\n  // 如果选的不是一个block，则返回null\n  if (selection.getAnchorKey() !== selection.getFocusKey()) {\n    return null;\n  }\n  return {\n    defaultTitle: block.getText().slice(selection.getStartOffset(), selection.getEndOffset()),\n  };\n};\n","import * as Immutable from 'immutable';\nimport {\n  AtomicBlockUtils,\n  DefaultDraftInlineStyle,\n  EditorState,\n  ContentState,\n  ContentBlock,\n  Modifier,\n  RichUtils,\n  SelectionState,\n  CharacterMetadata,\n} from 'draft-js';\nimport { ATOMIC_BLOCK_TYPE } from '../constants/blockTypes';\nimport { LINK_ENTITY_TYPE, DIVIDER_ENTITY_TYPE, IMAGE_ENTITY_TYPE } from '../constants/entityTypes';\nimport * as draftHelpers from './draftHelpers';\n\n// /**\n//  * 新增一个block\n//  * @param editorState {EditorState}\n//  * @param newType {string}\n//  * @param text {string}\n//  * @param data {object}\n//  * @return {EditorState}\n//  */\n// export const addNewBlock = (\n//   editorState: EditorState,\n//   newType = 'unstyled',\n//   text = '',\n//   data = {},\n// ): EditorState => {\n//   const selection = editorState.getSelection();\n//   if (!selection.isCollapsed()) {\n//     return editorState;\n//   }\n//   const contentState = editorState.getCurrentContent();\n//   const blockKey = selection.getStartKey();\n//   const blockMap = contentState.getBlockMap();\n//   const currentBlock = contentState.getBlockForKey(blockKey);\n//   if (!currentBlock) {\n//     return editorState;\n//   }\n//   if (currentBlock.getLength() === 0) {\n//     if (currentBlock.getType() === newType) {\n//       return editorState;\n//     }\n//     // @ts-ignore\n//     const newBlock: ContentBlock = currentBlock.merge({\n//       type: newType,\n//       data,\n//       text,\n//       characterList: Immutable.Repeat(\n//         // @ts-ignore\n//         new CharacterMetadata({\n//           style: Immutable.OrderedSet(),\n//           entity: null,\n//         }),\n//         text.length,\n//       ).toList(),\n//     });\n//     // @ts-ignore\n//     const newContentState: ContentState = contentState.merge({\n//       blockMap: blockMap.set(blockKey, newBlock),\n//       selectionAfter: selection,\n//     });\n//     return EditorState.forceSelection(\n//       EditorState.push(editorState, newContentState, 'change-block-type'),\n//       // @ts-ignore\n//       selection.merge({\n//         anchorKey: newBlock.getKey(),\n//         focusKey: newBlock.getKey(),\n//         anchorOffset: text.length,\n//         focusOffset: text.length,\n//       }),\n//     );\n//   }\n//   return editorState;\n// };\n\n/**\n * 添加链接\n * @param editorState {EditorState}\n * @param title {string}\n * @param url {string}\n * @return {EditorState}\n */\nexport const addLink = (editorState: EditorState, { title, url }: LinkEntityData): EditorState => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  // 创建新 entity\n  const entityKey = contentState\n    .createEntity(LINK_ENTITY_TYPE, 'MUTABLE', { url })\n    .getLastCreatedEntityKey();\n  const newContentState = Modifier.replaceText(\n    contentState,\n    selection,\n    title,\n    undefined,\n    entityKey,\n  );\n  return EditorState.push(editorState, newContentState, 'insert-characters');\n};\n\n/**\n * 编辑链接\n * @param editorState {EditorState}\n * @param title {string}\n * @param url {string}\n * @param blockKey {string}\n * @param entityKey {string}\n * @return {EditorState}\n */\nexport const editLink = (\n  editorState: EditorState,\n  {\n    title,\n    url,\n    blockKey,\n    entityKey,\n  }: LinkEntityData & {\n    blockKey: string;\n    entityKey: string;\n  },\n): EditorState => {\n  // 先选中entity\n  const entitySelection = draftHelpers.getEntitySelection(editorState, blockKey, entityKey);\n  const editorStateWithSelection = EditorState.forceSelection(editorState, entitySelection);\n  // 添加新的link，并设置offset为entity的最后\n  const newSelection = editorStateWithSelection.getSelection();\n  const oldOffset = newSelection.getAnchorOffset(); // entity range start\n  const newOffset = oldOffset + title.length; // new entity range end\n  return EditorState.forceSelection(\n    addLink(editorStateWithSelection, { title, url }),\n    // @ts-ignore\n    newSelection.merge({\n      focusOffset: newOffset,\n      anchorOffset: newOffset,\n    }),\n  );\n};\n\n/**\n * 取消链接\n * @param editorState {EditorState}\n * @param blockKey {string}\n * @param entityKey {string}\n * @return {EditorState}\n */\nexport const removeLink = (\n  editorState: EditorState,\n  blockKey: string,\n  entityKey: string,\n): EditorState => {\n  const selection = editorState.getSelection();\n  // 获取entity的selection\n  const entitySelection = draftHelpers.getEntitySelection(editorState, blockKey, entityKey);\n  // 取消link，并选取最初的selection\n  return EditorState.forceSelection(\n    RichUtils.toggleLink(editorState, entitySelection, null),\n    selection,\n  );\n};\n\n/**\n * 添加图片\n * @param editorState {EditorState}\n * @param src {string}\n * @param caption {string}\n * @param extraData {object}\n * @return {EditorState}\n */\nexport const addImage = (\n  editorState: EditorState,\n  { src, caption, ...extraData }: ImageEntityData,\n): EditorState => {\n  const contentState = editorState.getCurrentContent();\n  const contentStateWithEntity = contentState.createEntity(IMAGE_ENTITY_TYPE, 'IMMUTABLE', {\n    src,\n    caption,\n    ...extraData,\n  });\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ');\n\n  return EditorState.forceSelection(\n    newEditorState,\n    newEditorState.getCurrentContent().getSelectionAfter(),\n  );\n};\n\n/**\n * 编辑图片\n * @param editorState {EditorState}\n * @param entityKey {string}\n * @param data {object}\n * @return {EditorState}\n */\nexport const editImage = (\n  editorState: EditorState,\n  entityKey: string,\n  data: Partial<ImageEntityData>,\n): EditorState => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const newContentState = contentState.mergeEntityData(entityKey, data);\n  const newEditorState = EditorState.push(editorState, newContentState, 'apply-entity');\n\n  return EditorState.forceSelection(newEditorState, selection);\n};\n\n/**\n * 添加分割线\n * @param editorState {EditorState}\n * @param data [object]\n * @return {EditorState}\n */\nexport const addDivider = (editorState: EditorState, data = {}): EditorState => {\n  const contentState = editorState.getCurrentContent();\n  const contentStateWithEntity = contentState.createEntity(DIVIDER_ENTITY_TYPE, 'IMMUTABLE', data);\n  const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n  const newEditorState = AtomicBlockUtils.insertAtomicBlock(editorState, entityKey, ' ');\n\n  return EditorState.forceSelection(\n    newEditorState,\n    newEditorState.getCurrentContent().getSelectionAfter(),\n  );\n};\n\n/**\n * 插入一个unstyled block\n * @param editorState {EditorState}\n * @return {EditorState}\n */\nexport const insertUnstyledParagraph = (editorState: EditorState): EditorState => {\n  const content = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const startKey = selection.getStartKey();\n\n  const withSplitContent = Modifier.splitBlock(content, selection);\n  const unstyledBlockKey = withSplitContent.getKeyAfter(startKey);\n  const unstyledSelection = SelectionState.createEmpty(unstyledBlockKey);\n  const unstyledContent = Modifier.setBlockType(withSplitContent, unstyledSelection, 'unstyled');\n\n  return EditorState.forceSelection(\n    EditorState.push(editorState, unstyledContent, 'split-block'),\n    unstyledSelection,\n  );\n};\n\n/**\n * 去除所有inline style\n * @param contentState {ContentState}\n * @param selection {SelectionState}\n * @return {ContentState}\n */\nexport const removeInlineStyle = (\n  contentState: ContentState,\n  selection: SelectionState,\n): ContentState => {\n  // remove style reducer\n  return Object.keys(DefaultDraftInlineStyle).reduce((_contentState, inlineStyle) => {\n    return Modifier.removeInlineStyle(_contentState, selection, inlineStyle);\n  }, contentState);\n};\n\n/**\n * 清除block的type，并设置为unstyled\n * @param contentState {ContentState}\n * @param selection {SelectionState}\n * @return {ContentState}\n */\nexport const removeBlockType = (\n  contentState: ContentState,\n  selection: SelectionState,\n): ContentState => {\n  const blockMap = contentState.getBlockMap();\n  const startKey = selection.getStartKey();\n  const endKey = selection.getEndKey();\n\n  // 找到被选中的blocks，并清除格式\n  const selectedBlockMapSeq = blockMap\n    .toKeyedSeq()\n    .skipUntil((v, k) => k === startKey)\n    .takeUntil((v, k) => k === endKey)\n    .concat(Immutable.Map({ [endKey]: blockMap.get(endKey) }))\n    .map((block: ContentBlock) => (block.getType() === ATOMIC_BLOCK_TYPE ? block : block.set('type', 'unstyled')));\n\n  // 将已经清除格式的blockMapSeq合并回去\n  // @ts-ignore\n  const newBlockMap = blockMap.merge(selectedBlockMapSeq);\n  // @ts-ignore\n  return contentState.set('blockMap', newBlockMap);\n};\n\n/**\n * RichUtils.toggleBlockType 的增强\n * 在切换时，可以去除code-block内的inline-style\n * @param editorState {EditorState}\n * @param type {string}\n * @return {EditorState}\n */\nexport const toggleBlockType = (editorState: EditorState, type: string): EditorState => {\n  // 用户选取的selection\n  const selection = editorState.getSelection();\n  // 先toggle type\n  const toggledState = RichUtils.toggleBlockType(editorState, type);\n  let newContentState = toggledState.getCurrentContent();\n\n  // 清除code-block里的inline style\n  if (type === 'code-block') {\n    const startKey = selection.getStartKey();\n    const endKey = selection.getEndKey();\n    const lastBlock = newContentState.getBlockForKey(endKey);\n    // 计算出整个code-block的selection\n    const newSelection = new SelectionState({\n      anchorKey: startKey,\n      anchorOffset: 0,\n      focusKey: endKey,\n      focusOffset: lastBlock.getLength(),\n    });\n    newContentState = removeInlineStyle(newContentState, newSelection);\n  }\n\n  return EditorState.forceSelection(\n    EditorState.push(editorState, newContentState, 'change-block-type'),\n    selection,\n  );\n};\n\n/**\n * 重置当前selection选中block的type\n * @param editorState {EditorState}\n * @param type {string}\n * @return {EditorState}\n */\nexport const resetBlockType = (editorState: EditorState, type: string): EditorState => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const startKey = selection.getStartKey();\n  const blockMap = contentState.getBlockMap();\n  const block = draftHelpers.getCurrentBlock(editorState);\n\n  const newBlock = block.merge({\n    text: '',\n    type,\n  });\n  const newContentState = contentState.mergeDeep({\n    // @ts-ignore\n    blockMap: blockMap.set(startKey, newBlock),\n    selectionAfter: selection.merge({\n      anchorOffset: 0,\n      focusOffset: 0,\n    }),\n  });\n  // @ts-ignore\n  return EditorState.push(editorState, newContentState, 'change-block-type');\n};\n\n/**\n * 清除所有格式\n * @param editorState {EditorState}\n * @return {EditorState}\n */\nexport const clearFormat = (editorState: EditorState): EditorState => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n\n  // 先清除style，再清除block\n  const inlineStyleRemovedContent = removeInlineStyle(contentState, selection);\n  const blockTypeRemovedContent = removeBlockType(inlineStyleRemovedContent, selection);\n\n  return EditorState.forceSelection(\n    EditorState.push(editorState, blockTypeRemovedContent, 'change-block-type'),\n    selection,\n  );\n};\n\n/**\n * 拦截input，并模拟输入\n * @param editorState {EditorState}\n * @param inputString {string}\n * @return {EditorState}\n */\nexport const mockInput = (editorState: EditorState, inputString: string): EditorState => {\n  const newContentState = Modifier.insertText(\n    editorState.getCurrentContent(),\n    editorState.getSelection(),\n    inputString,\n    editorState.getCurrentInlineStyle(),\n  );\n  return EditorState.forceSelection(\n    EditorState.push(editorState, newContentState, 'insert-characters'),\n    newContentState.getSelectionAfter(),\n  );\n};\n","const quoteReg = /<blockquote>([\\w\\W]*?)<\\/blockquote>/g;\n\n/**\n * 将blockquote内的多个p标签，同blockquote一起，转换成多个blockquote标签\n * @param html\n * @return {string}\n */\nexport const transformBlockQuote = (html: string): string => {\n  return html.replace(quoteReg, (match, p) => {\n    return p.replace(/<p>/g, '<blockquote>').replace(/<\\/p>/g, '</blockquote>');\n  });\n};\n\n/**\n * 判断是否为mac平台\n * @return {boolean}\n */\nexport const isMac = (): boolean => {\n  return window.navigator && /Mac/i.test(navigator.userAgent);\n};\n\nexport const getShortcut = (shortcut: string): string => {\n  if (isMac()) {\n    return shortcut.replace(/\\+/g, '');\n  }\n  return shortcut\n    .replace('⌘', 'Ctrl')\n    .replace('⇧', 'Shift')\n    .replace('⌥', 'Alt');\n};\n","// 用于html与editorState的互相转换\nimport * as React from 'react';\nimport { ContentState, genKey } from 'draft-js';\nimport { convertToHTML, convertFromHTML } from 'draft-convert';\nimport {\n  LINK_ENTITY_TYPE,\n  DIVIDER_ENTITY_TYPE,\n  IMAGE_ENTITY_TYPE,\n  IMAGE_CAPTION_ENTITY_TYPE,\n} from '../constants/entityTypes';\nimport { ATOMIC_BLOCK_TYPE } from '../constants/blockTypes';\nimport { transformBlockQuote } from './commonUtils';\n\nconst REGEX_LF = /\\n/g;\n\nconst isImagePackage = (node: HTMLElement): boolean => node.classList.contains('image-package');\nconst isImageCaption = (node: HTMLElement): boolean => node.classList.contains('image-caption');\n\nexport function contentStateToHtml(contentState: ContentState): string {\n  if (!contentState.hasText()) {\n    return '';\n  }\n\n  // 生成IMAGE_CAPTION_ENTITY对应的html\n  const IMAGE_CAPTION_ENTITY_HTML = `${IMAGE_CAPTION_ENTITY_TYPE}-${genKey()}-${+new Date()}`;\n\n  const html = convertToHTML({\n    styleToHTML: (style) => {\n      // inlineStyle与HTML的映射关系\n      switch (style) {\n        case 'BOLD':\n          return <b/>;\n        case 'ITALIC':\n          return <i/>;\n        case 'UNDERLINE':\n          return <u/>;\n        case 'CODE':\n          // code表示行内代码\n          return <code/>;\n        case 'STRIKETHROUGH':\n          return <del/>;\n        default:\n          return {\n            start: '',\n            end: '',\n          };\n      }\n    },\n    blockToHTML: (block) => {\n      // blockType与HTML的映射关系\n      switch (block.type) {\n        // 文章中header level最小为4\n        case 'header-five': {\n          return {\n            start: '<h4>',\n            end: '</h4>',\n          };\n        }\n        // 文章中header level最小为4\n        case 'header-six': {\n          return {\n            start: '<h4>',\n            end: '</h4>',\n          };\n        }\n        case 'unstyled': {\n          return {\n            start: '<p>',\n            end: '</p>',\n            empty: '<p><br></p>',\n          };\n        }\n        case 'code-block': {\n          // pre表示代码块\n          return {\n            element: <code/>,\n            nest: <pre/>,\n          };\n        }\n        // 用blockquote标签包裹p标签\n        case 'blockquote': {\n          return {\n            element: <p/>,\n            nest: <blockquote/>,\n          };\n        }\n        // 生成出来的divider、image不需要用figure包裹\n        case ATOMIC_BLOCK_TYPE: {\n          return {\n            start: '',\n            end: '',\n          };\n        }\n        default: {\n          return undefined;\n        }\n      }\n    },\n    // entity与HTML的映射关系\n    entityToHTML: (entity, originalText) => {\n      const { type, data } = entity;\n      switch (type) {\n        case LINK_ENTITY_TYPE: {\n          return <a href={data.url}>{originalText}</a>;\n        }\n        case DIVIDER_ENTITY_TYPE: {\n          return <hr/>;\n        }\n        case IMAGE_ENTITY_TYPE: {\n          const { src, caption } = data;\n          return (\n            <div className=\"image-package\">\n              <img src={src} alt={caption || ''}/>\n              <br/>\n              <div className=\"image-caption\">{caption}</div>\n            </div>\n          );\n        }\n        case IMAGE_CAPTION_ENTITY_TYPE: {\n          return IMAGE_CAPTION_ENTITY_HTML;\n        }\n        default: {\n          return originalText;\n        }\n      }\n    },\n  })(contentState);\n\n  return html\n    .replace(new RegExp(`<br/>${IMAGE_CAPTION_ENTITY_HTML}`, 'g'), '') // 把IMAGE_CAPTION_ENTITY对应的html替换成空字符串\n    .replace(/<\\/code><code( lang=\"[^\"]*\")?>/g, '<br>') // 把多行的code-block转换成一行的\n    .replace(/\\n/g, '<br>'); // 把换行符替换成`<br>`\n}\n\nexport function htmlToContentState(rawHtml: string): ContentState {\n  const htmlWithoutBr = rawHtml.replace(REGEX_LF, ''); // 去除换行符\n  const html = transformBlockQuote(htmlWithoutBr); // 转换blockquote\n  return convertFromHTML({\n    // html与inlineStyle的映射\n    htmlToStyle: (nodeName, node, currentStyle) => {\n      // 对于pre的子节点code，去除style\n      if (nodeName === 'code' && node.parentElement && node.parentElement.tagName === 'PRE') {\n        return currentStyle.remove('CODE');\n      }\n      return currentStyle;\n    },\n    htmlToBlock: (nodeName, node, lastList, inBlock) => {\n      // html与blockType的映射\n      switch (nodeName) {\n        // 文章中header level最小为4\n        case 'h5': {\n          return {\n            type: 'header-four',\n          };\n        }\n        // 文章中header level最小为4\n        case 'h6': {\n          return {\n            type: 'header-four',\n          };\n        }\n        case 'p': {\n          return {\n            type: 'unstyled',\n          };\n        }\n        case 'blockquote': {\n          return {\n            type: 'blockquote',\n            data: {},\n          };\n        }\n        case 'div': {\n          if (isImagePackage(node)) {\n            return {\n              type: ATOMIC_BLOCK_TYPE,\n              data: {},\n            };\n          }\n          // 这里必须return一个值，否则convert会出错\n          return null;\n        }\n        case 'hr': {\n          if (inBlock !== ATOMIC_BLOCK_TYPE) {\n            return {\n              type: ATOMIC_BLOCK_TYPE,\n              data: {},\n            };\n          }\n        }\n        // eslint-disable-next-line no-fallthrough\n        case 'pre': {\n          if (inBlock === 'code-block') {\n            return {\n              type: 'code-block',\n              data: {},\n            };\n          }\n        }\n        // eslint-disable-next-line no-fallthrough\n        default: {\n          return undefined;\n        }\n      }\n    },\n    htmlToEntity: (nodeName, node, createEntity) => {\n      // html与entity的映射\n      switch (nodeName) {\n        case 'a': {\n          return createEntity(LINK_ENTITY_TYPE, 'MUTABLE', {\n            url: (node as HTMLAnchorElement).href,\n          });\n        }\n        case 'hr': {\n          return createEntity(DIVIDER_ENTITY_TYPE, 'IMMUTABLE', {});\n        }\n        case 'div': {\n          if (isImagePackage(node)) {\n            const { src } = node.querySelector('img') as HTMLImageElement;\n            const captionEl = node.querySelector('.image-caption') as HTMLElement;\n            const caption = captionEl ? captionEl.textContent || captionEl.innerText : '';\n            return createEntity(IMAGE_ENTITY_TYPE, 'IMMUTABLE', {\n              src,\n              caption,\n            });\n          }\n          if (isImageCaption(node)) {\n            return createEntity(IMAGE_CAPTION_ENTITY_TYPE, 'IMMUTABLE', { fuck: 1 });\n          }\n        }\n        // eslint-disable-next-line no-fallthrough\n        default: {\n          return undefined;\n        }\n      }\n    },\n  })(html);\n}\n","import * as React from 'react';\nimport { EditorState } from 'draft-js';\n\n// 该context保存了MyEditor中的state，包括editorState、readOnly等state，以及一些相关方法\n// eslint-disable-next-line import/prefer-default-export\nexport const EditorStateContext = React.createContext({\n  editorState: EditorState.createEmpty(),\n  readOnly: false,\n});\n","export default class EventEmitter {\n  private all: EventMap;\n\n  private isStop: boolean;\n\n  constructor() {\n    this.all = {};\n    this.isStop = false;\n  }\n\n  public on(type: string, handler: EventHandler) {\n    if (!this.all[type]) {\n      this.all[type] = [];\n    }\n    if (!this.all[type].includes(handler)) {\n      this.all[type].push(handler);\n    }\n  }\n\n  public off(type: string, handler: EventHandler) {\n    if (this.all[type]) {\n      this.all[type] = this.all[type].filter(_handler => _handler !== handler);\n    }\n  }\n\n  public emit(type: string, ...args: any[]) {\n    if (!this.isStop) {\n      (this.all[type] || []).forEach((handler: EventHandler) => {\n        handler(...args);\n      });\n    }\n  }\n\n  // 销毁指定type的所有事件\n  public destroy(type: string) {\n    this.all[type] = [];\n  }\n\n  public startEmit() {\n    this.isStop = false;\n  }\n\n  // 保留之前绑定的事件，但emit时不触发事件\n  public stopEmit() {\n    this.isStop = true;\n  }\n\n  // 清除之前绑定的所有事件\n  public destroyAll() {\n    this.all = {};\n  }\n}\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { Tooltip } from 'antd';\nimport { getShortcut } from '../../utils/commonUtils';\n\nconst baseClass = 'editor-control-btn';\n\ninterface EditorControlButtonProps {\n  active: boolean;\n  disabled: boolean;\n  command: string;\n  text: string;\n  onCommand: (command: string) => void;\n  label?: string;\n  icon?: IconProp;\n  shortcut?: string;\n  className?: string;\n}\n\nexport default class EditorControlButton extends React.PureComponent<EditorControlButtonProps> {\n  handleClick = () => {\n    const { disabled, command, onCommand } = this.props;\n    if (disabled) {\n      return;\n    }\n    if (_.isFunction(onCommand)) {\n      onCommand(command);\n    }\n  };\n\n  getButton = () => {\n    const { label, icon, active, disabled, className } = this.props;\n    const btnClass = classNames({\n      [`${className}`]: !!className,\n      [baseClass]: true,\n      [`${baseClass}-active`]: active,\n      [`${baseClass}-disabled`]: disabled,\n    });\n\n    return (\n      <span\n        role=\"button\"\n        tabIndex={0}\n        aria-pressed={active}\n        aria-disabled={disabled}\n        className={btnClass}\n        onClick={this.handleClick}\n      >\n        {icon ? <FontAwesomeIcon icon={icon}/> : label}\n      </span>\n    );\n  };\n\n  render() {\n    const { shortcut, text, disabled } = this.props;\n    if (shortcut && !disabled) {\n      const title = `${text}(${getShortcut(shortcut)})`;\n      return <Tooltip title={title}>{this.getButton()}</Tooltip>;\n    }\n    return this.getButton();\n  }\n}\n","import * as React from 'react';\n\nexport default class EditorControlSeparator extends React.PureComponent {\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    return <span className={'editor-control-toolbar-separator'}/>;\n  }\n}\n","// 编辑器toolbar中inline以及block的控制按钮\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\ntype ControlItem = {\n  text: string;\n  styleType: string;\n  label?: string;\n  icon?: IconProp;\n  shortcut?: string;\n};\n\nexport const INLINE_STYLES: ControlItem[] = [\n  { text: '粗体', styleType: 'BOLD', icon: 'bold', shortcut: '⌘+B' },\n  { text: '斜体', styleType: 'ITALIC', icon: 'italic', shortcut: '⌘+I' },\n  { text: '下划线', styleType: 'UNDERLINE', icon: 'underline', shortcut: '⌘+U' },\n  { text: '删除线', styleType: 'STRIKETHROUGH', icon: 'strikethrough', shortcut: '⌘+D' },\n  { text: 'Code', styleType: 'CODE', icon: 'highlighter', shortcut: '⌘+J' },\n];\n\nexport const BLOCK_TYPES: ControlItem[] = [\n  { text: '一级标题', label: 'H1', styleType: 'header-one', shortcut: '⌘+⌥+1' },\n  { text: '二级标题', label: 'H2', styleType: 'header-two', shortcut: '⌘+⌥+2' },\n  { text: '三级标题', label: 'H3', styleType: 'header-three', shortcut: '⌘+⌥+3' },\n  { text: '四级标题', label: 'H4', styleType: 'header-four', shortcut: '⌘+⌥+4' },\n  { text: '代码块', styleType: 'code-block', icon: 'code', shortcut: '⌘+⇧+J' },\n  { text: '引用块', styleType: 'blockquote', icon: 'quote-left', shortcut: '⌘+⇧+B' },\n  { text: '无序列表', styleType: 'unordered-list-item', icon: 'list-ul', shortcut: '⌘+⇧+U' },\n  { text: '有序列表', styleType: 'ordered-list-item', icon: 'list-ol', shortcut: '⌘+⇧+O' },\n];\n","import * as React from 'react';\nimport { EditorState, RichUtils } from 'draft-js';\nimport EditorControlButton from './EditorControlButton';\nimport EditorControlSeparator from './EditorControlSeparator';\nimport { INLINE_STYLES, BLOCK_TYPES } from '../../constants/editorControlItems';\nimport { getControlButtonDisable } from '../../utils/draftHelpers';\nimport './EditorControl.scss';\n\ninterface ToolBarProps {\n  editorState: EditorState;\n  onCommand: (command: string) => void;\n}\n\nexport default class EditorControlToolBar extends React.PureComponent<ToolBarProps> {\n  preventDefault = (e: React.MouseEvent) => {\n    e.preventDefault();\n  };\n\n  render() {\n    const { editorState, onCommand } = this.props;\n    const {\n      inlineDisabled,\n      blockDisabled,\n      linkDisabled,\n      entityDisabled,\n      clearFormatDisabled,\n    } = getControlButtonDisable(editorState);\n    const currentStyle = editorState.getCurrentInlineStyle();\n    const blockType = RichUtils.getCurrentBlockType(editorState);\n\n    return (\n      <div\n        role=\"toolbar\"\n        tabIndex={0}\n        className={'editor-control-toolbar'}\n        onMouseDown={this.preventDefault}\n      >\n        {/* inline-style-control */}\n        {INLINE_STYLES.map(style => (\n          <EditorControlButton\n            key={style.styleType}\n            active={currentStyle.has(style.styleType)}\n            label={style.label}\n            icon={style.icon}\n            disabled={inlineDisabled}\n            shortcut={style.shortcut}\n            text={style.text}\n            command={`toggle-inline-style-${style.styleType}`}\n            onCommand={onCommand}\n          />\n        ))}\n        <EditorControlSeparator/>\n        {/* block-type-control */}\n        {BLOCK_TYPES.map(type => (\n          <EditorControlButton\n            key={type.styleType}\n            label={type.label}\n            active={blockType === type.styleType}\n            icon={type.icon}\n            disabled={blockDisabled}\n            shortcut={type.shortcut}\n            text={type.text}\n            command={`toggle-block-type-${type.styleType}`}\n            onCommand={onCommand}\n          />\n        ))}\n        <EditorControlSeparator/>\n        <EditorControlButton\n          icon={'link'}\n          active={false}\n          disabled={linkDisabled}\n          shortcut={'⌘+K'}\n          text={'插入链接'}\n          command={'insert-link'}\n          onCommand={onCommand}\n        />\n        <EditorControlButton\n          icon={'image'}\n          active={false}\n          disabled={entityDisabled}\n          shortcut={'⌘+⇧+I'}\n          text={'上传图片'}\n          command={'insert-image'}\n          onCommand={onCommand}\n        />\n        <EditorControlButton\n          icon={'minus'}\n          active={false}\n          disabled={entityDisabled}\n          shortcut={'⌘+⇧+D'}\n          text={'插入分割线'}\n          command={'insert-divider'}\n          onCommand={onCommand}\n        />\n        <EditorControlSeparator/>\n        <EditorControlButton\n          icon={'wrench'}\n          active={false}\n          disabled={clearFormatDisabled}\n          shortcut={'⌘+⇧+L'}\n          text={'清除所有格式'}\n          command={'clear-format'}\n          onCommand={onCommand}\n        />\n      </div>\n    );\n  }\n}\n","const simplePattern = '^((https?):\\\\/\\\\/)?([-_A-Za-z0-9]+(\\\\.))+[-_A-Za-z0-9]{2,}([-_/A-Za-z0-9]+)*';\nconst SIMPLE_URL_REG = new RegExp(`${simplePattern}$`); // www.google.com/xxx/bbb\nconst SIMPLE_URL_PREFIX_REG = new RegExp(simplePattern);\nconst URL_QUERY_REG = /^(\\?[-_A-Za-z0-9&@#/%?=~|!:.,;\\u4e00-\\u9fa5]*)*$/; // ?a=1&b=2\n\nexport function isUrl(url: string): boolean {\n  const isSimple = SIMPLE_URL_REG.test(url);\n  // 如果是简单url，则直接返回true\n  if (isSimple) {\n    return true;\n  }\n  const query = url.replace(SIMPLE_URL_PREFIX_REG, '');\n  return SIMPLE_URL_PREFIX_REG.test(url) && URL_QUERY_REG.test(query);\n}\n\nconst pattern = {\n  email: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  url: new RegExp(\n    '^(?:(?:http|https|ftp)://|//)?(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$',\n    'i',\n  ),\n};\n\n// export function isUrl(value) {\n//   return typeof value === 'string' && !!value.match(pattern.url);\n// }\n\nexport function isEmail(value: string): boolean {\n  return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;\n}\n","import * as React from 'react';\nimport { Input, Icon, Modal } from 'antd';\nimport { isUrl } from '../../utils/validator';\n\ninterface LinkModalProps {\n  visible: boolean;\n  defaultTitle: string;\n  defaultUrl: string;\n  onOk: (e: React.MouseEvent | React.KeyboardEvent, data: LinkEntityData) => void;\n  onCancel: (e: React.MouseEvent, autoFocus: boolean) => void;\n}\n\ninterface LinkModalState {\n  title: string;\n  url: string;\n}\n\nexport default class LinkModal extends React.PureComponent<LinkModalProps, LinkModalState> {\n  static defaultProps = {\n    defaultTitle: '',\n    defaultUrl: '',\n  };\n\n  constructor(props: LinkModalProps) {\n    super(props);\n    this.state = {\n      title: '',\n      url: '',\n    };\n  }\n\n  handleLinkInputMount = (inputComponent: Input) => {\n    if (inputComponent) {\n      const { defaultTitle, defaultUrl } = this.props;\n      this.setState(\n        {\n          title: defaultTitle,\n          url: defaultUrl,\n        },\n        () => {\n          inputComponent.input.select();\n        },\n      );\n    }\n  };\n\n  handleOk = (e: React.MouseEvent | React.KeyboardEvent) => {\n    const { title, url } = this.state;\n    if (isUrl(url)) {\n      this.props.onOk(e, {\n        // 如果未输入title，则用url代替\n        title: title || url,\n        // 如果未填写protocol，则默认添加http\n        url: /^https?:\\/\\//.test(url) ? url : `http://${url}`,\n      });\n    }\n  };\n\n  handleCancel = (e: React.MouseEvent) => {\n    this.props.onCancel(e, true);\n  };\n\n  clear = () => {\n    this.setState({\n      title: '',\n      url: '',\n    });\n  };\n\n  handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      title: e.target.value,\n    });\n  };\n\n  handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      url: e.target.value,\n    });\n  };\n\n  render() {\n    const { visible } = this.props;\n    const { title, url } = this.state;\n    const urlIsValid = isUrl(url);\n\n    return (\n      <Modal\n        title=\"插入链接\"\n        width={400}\n        visible={visible}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n        afterClose={this.clear}\n        okButtonProps={{ disabled: !urlIsValid }}\n        centered\n        destroyOnClose\n      >\n        <Input\n          placeholder={'请输入链接文本'}\n          value={title}\n          onChange={this.handleTitleChange}\n          style={{ marginBottom: 12 }}\n          prefix={<Icon type=\"edit\"/>}\n          onPressEnter={this.handleOk}\n        />\n        <Input\n          placeholder={'请输入链接地址'}\n          value={url}\n          onChange={this.handleUrlChange}\n          prefix={<Icon type=\"link\"/>}\n          onPressEnter={this.handleOk}\n          ref={this.handleLinkInputMount}\n        />\n      </Modal>\n    );\n  }\n}\n","import { ComponentClass, FunctionComponent } from 'react';\n// eslint-disable-next-line import/prefer-default-export\nexport const getComponentName = (c: ComponentClass | FunctionComponent): string => c.displayName || c.name || 'Component';\n","import * as React from 'react';\nimport { getComponentName } from '../utils/reactUtils';\nimport { EditorStateContext } from '../utils/context';\n\nexport default (WrapperComponent: React.ComponentClass<Merge<any, {}>>): any => {\n  return class withEditorState extends React.PureComponent {\n    static displayName = `withEditorState(${getComponentName(WrapperComponent)})`;\n\n    render() {\n      return (\n        <EditorStateContext.Consumer>\n          {(context) => {\n            return <WrapperComponent {...this.props} {...context}/>;\n          }}\n        </EditorStateContext.Consumer>\n      );\n    }\n  };\n};\n","import * as React from 'react';\nimport { createPortal } from 'react-dom';\n\ninterface PortalProps {\n  getContainer: () => HTMLElement;\n}\n\nexport default class Portal extends React.PureComponent<PortalProps> {\n  private container: HTMLElement | null;\n\n  constructor(props: PortalProps) {\n    super(props);\n    this.container = null;\n  }\n\n  componentDidMount() {\n    this.createContainer();\n  }\n\n  componentWillUnmount() {\n    this.removeContainer();\n  }\n\n  createContainer(): void {\n    this.container = this.props.getContainer();\n    this.forceUpdate();\n  }\n\n  removeContainer(): void {\n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n  }\n\n  render() {\n    if (this.container) {\n      return createPortal(this.props.children, this.container);\n    }\n    return null;\n  }\n}\n","/* eslint-disable arrow-parens,max-len */\nimport * as React from 'react';\nimport { getComponentName } from '../utils/reactUtils';\nimport Portal from '../components/Portal/Portal';\n\nexport default (getContainer: () => HTMLElement): any => {\n  return (WrapperComponent: React.ComponentClass<Merge<any, {}>>): any => {\n    return class extends React.PureComponent<any> {\n      static displayName = `withPortal(${getComponentName(\n        WrapperComponent as React.ComponentClass,\n      )})`;\n\n      render() {\n        return (\n          <Portal getContainer={getContainer}>\n            <WrapperComponent {...this.props}/>\n          </Portal>\n        );\n      }\n    };\n  };\n};\n","import * as React from 'react';\nimport withPortal from '../../HOC/withPortal';\nimport './LinkPopover.scss';\n\nconst getRelativeParent = (element: HTMLElement): HTMLElement | null => {\n  if (!element) {\n    return null;\n  }\n  const position = window.getComputedStyle(element).getPropertyValue('position');\n  if (position !== 'static') {\n    return element;\n  }\n  return getRelativeParent(element.parentElement as HTMLElement);\n};\n\ninterface LinkPopoverProps {\n  editorState: object;\n  url: string;\n  blockKey: string;\n  entityKey: string;\n  onRemoveLink: (blockKey: string, entityKey: string) => any;\n  onEditLink: () => any;\n}\n\n@withPortal(() => {\n  const container = document.createElement('div');\n  container.className = 'link-popover-root';\n  document.body.appendChild(container);\n  return container;\n})\nexport default class LinkPopover extends React.Component<LinkPopoverProps> {\n  private renderedOnce: boolean;\n\n  private toolbar: HTMLElement | null;\n\n  constructor(props: LinkPopoverProps) {\n    super(props);\n    this.state = {\n      position: {},\n    };\n    this.renderedOnce = false;\n    this.toolbar = null;\n  }\n\n  shouldComponentUpdate(nextProps: LinkPopoverProps) {\n    const { blockKey, entityKey } = this.props;\n    if (this.renderedOnce) {\n      const ret = blockKey !== nextProps.blockKey || entityKey !== nextProps.entityKey;\n      if (ret) {\n        this.renderedOnce = false;\n      }\n      return ret;\n    }\n    this.renderedOnce = true;\n    return true;\n  }\n\n  preventDefault = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  handleRemoveLink = () => {\n    const { entityKey, blockKey } = this.props;\n    this.props.onRemoveLink(blockKey, entityKey);\n  };\n\n  handleEditLink = () => {\n    this.props.onEditLink();\n  };\n\n  render() {\n    let { url } = this.props;\n    if (url.length > 30) {\n      url = `${url.slice(0, 30)}...`;\n    }\n    return (\n      <div\n        role=\"toolbar\"\n        tabIndex={0}\n        className=\"link-popover-container\"\n        ref={(element: HTMLDivElement) => {\n          this.toolbar = element;\n        }}\n        onMouseDown={this.preventDefault}\n      >\n        <div className=\"link-popover-content\">\n          <a href={this.props.url} title={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {url}\n          </a>\n          <button onClick={this.handleEditLink}>修改链接</button>\n          <button onClick={this.handleRemoveLink}>取消链接</button>\n        </div>\n      </div>\n    );\n  }\n}\n","import { EditorState, DraftHandleValue } from 'draft-js';\nimport * as draftHelpers from '../../utils/draftHelpers';\nimport * as draftModifiers from '../../utils/draftModifiers';\n\nexport default () => {\n  // @ts-ignore\n  const pluginMethods: PluginMethods = {};\n  let isReset = false; // 用于表明是否重新设置了blockType\n\n  return {\n    initialize(t: PluginMethods) {\n      Object.assign(pluginMethods, t);\n    },\n    // 在输入前，进行列表的markdown语法补全\n    handleBeforeInput(inputString: string, editorState: EditorState): DraftHandleValue {\n      const { setEditorState } = pluginMethods;\n      const selection = editorState.getSelection();\n      if (selection.isCollapsed() && inputString === ' ') {\n        // eslint-disable-next-line no-param-reassign\n        editorState = draftModifiers.mockInput(editorState, inputString); // 先mock一次input\n        let newEditorState = editorState;\n        const block = draftHelpers.getCurrentBlock(editorState);\n        const blockText = block.getText();\n        const blockType = block.getType();\n\n        // 只转换unstyled block\n        if (blockType !== 'unstyled') {\n          return 'not-handled';\n        }\n        // ul\n        if (/^([-+*]) $/.test(blockText)) {\n          newEditorState = draftModifiers.resetBlockType(editorState, 'unordered-list-item');\n        }\n        // ol\n        if (/^1\\. $/.test(blockText)) {\n          newEditorState = draftModifiers.resetBlockType(editorState, 'ordered-list-item');\n        }\n\n        if (newEditorState !== editorState) {\n          setEditorState(newEditorState);\n          isReset = true;\n          return 'handled';\n        }\n        return 'not-handled';\n      }\n      return 'not-handled';\n    },\n    // 删除时进行undo\n    handleCommand(command: string): DraftHandleValue {\n      const { getEditorState, setEditorState } = pluginMethods;\n      const editorState = getEditorState();\n      if (command === 'backspace' && isReset) {\n        setEditorState(EditorState.undo(editorState));\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n    onChange(editorState: EditorState): EditorState {\n      isReset = false;\n      return editorState;\n    },\n  };\n};\n","export default {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n\n  TAB: 9,\n  CAP: 20,\n  SHIFT: 16,\n  CTRL: 17,\n\n  ALT: 18,\n  COMMAND: 91,\n  WIN: 92,\n\n  BACKSPACE: 8,\n  DELETE: 46,\n  SPACE: 32,\n  ENTER: 13,\n  ESC: 27,\n\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n};\n","import { KeyboardEvent } from 'react';\nimport { KeyBindingUtil, getDefaultKeyBinding, RichUtils, DraftHandleValue } from 'draft-js';\nimport { getControlButtonDisable } from '../../utils/draftHelpers';\nimport { toggleBlockType } from '../../utils/draftModifiers';\nimport keyCode from '../../constants/keyCode';\n\nconst BLOCK = 'toggle-block-type';\nconst INLINE = 'toggle-inline-style';\n\n// 这里是Editor统一处理keyBinding的方法，目的是拆分代码，并减少MyEditor.js文件的大小\n// 但要注意，这个插件必须放在所有插件的最后\nexport default () => {\n  // @ts-ignore\n  const pluginMethods: PluginMethods = {};\n\n  return {\n    initialize(t: PluginMethods) {\n      Object.assign(pluginMethods, t);\n    },\n    // 将按下的每一个key转换成相应的command，example: cmd + b -> bold\n    keyBindingFn(e: KeyboardEvent) {\n      /**\n       * osx ? (⌘ + ⌥ || ctrl + alt): ctrl + alt\n       */\n      if ((e.metaKey && KeyBindingUtil.isOptionKeyCommand(e)) || (e.ctrlKey && e.altKey)) {\n        // 不允许按下shift\n        if (e.shiftKey) {\n          return null;\n        }\n        // eslint-disable-next-line default-case\n        switch (e.keyCode) {\n          case keyCode['1']: {\n            return `${BLOCK}-header-one`;\n          }\n          case keyCode['2']: {\n            return `${BLOCK}-header-two`;\n          }\n          case keyCode['3']: {\n            return `${BLOCK}-header-three`;\n          }\n          case keyCode['4']: {\n            return `${BLOCK}-header-four`;\n          }\n        }\n      }\n      /**\n       * osx ? ⌘ + ⇧ : ctrl + shift\n       */\n      if (KeyBindingUtil.hasCommandModifier(e) && e.shiftKey) {\n        // eslint-disable-next-line default-case\n        switch (e.keyCode) {\n          case keyCode.J: {\n            return `${BLOCK}-code-block`;\n          }\n          case keyCode.B: {\n            return `${BLOCK}-blockquote`;\n          }\n          case keyCode.O: {\n            return `${BLOCK}-ordered-list-item`;\n          }\n          case keyCode.U: {\n            return `${BLOCK}-unordered-list-item`;\n          }\n        }\n      }\n      /**\n       * osx ? ⌘ : ctrl\n       */\n      if (KeyBindingUtil.hasCommandModifier(e)) {\n        // eslint-disable-next-line default-case\n        switch (e.keyCode) {\n          case keyCode.B: {\n            return `${INLINE}-BOLD`;\n          }\n          case keyCode.I: {\n            return `${INLINE}-ITALIC`;\n          }\n          case keyCode.U: {\n            return `${INLINE}-UNDERLINE`;\n          }\n          case keyCode.D: {\n            return `${INLINE}-STRIKETHROUGH`;\n          }\n          case keyCode.J: {\n            return `${INLINE}-CODE`;\n          }\n          case keyCode.S: {\n            return 'save';\n          }\n        }\n      }\n\n      return getDefaultKeyBinding(e);\n    },\n    // 根据command去设置编辑器的状态\n    handleCommand(command: string): DraftHandleValue {\n      const { getEditorState, setEditorState } = pluginMethods;\n      const editorState = getEditorState();\n      const { inlineDisabled } = getControlButtonDisable(editorState);\n\n      if (command.startsWith('toggle-inline-style-')) {\n        // disable时不进行任何操作\n        if (inlineDisabled) {\n          return 'not-handled';\n        }\n        const style = command.replace(/^toggle-inline-style-/, '');\n        setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n        return 'handled';\n      }\n\n      if (command.startsWith('toggle-block-type-')) {\n        const type = command.replace(/^toggle-block-type-/, '');\n        setEditorState(toggleBlockType(editorState, type));\n        return 'handled';\n      }\n\n      const newEditorState = RichUtils.handleKeyCommand(editorState, command);\n      if (newEditorState) {\n        setEditorState(newEditorState);\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n  };\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport './Divider.scss';\n\ninterface DividerProps {\n  className?: string;\n}\n\nexport default class Divider extends React.PureComponent<DividerProps> {\n  render() {\n    const { className } = this.props;\n    const wrapperClass = classNames(className, 'editor-divider');\n\n    return (\n      <div className={wrapperClass}>\n        <hr/>\n      </div>\n    );\n  }\n}\n","import * as _ from 'lodash';\nimport { KeyboardEvent } from 'react';\nimport { KeyBindingUtil, DraftHandleValue, ContentBlock } from 'draft-js';\nimport Divider from './Divider';\nimport { DIVIDER_ENTITY_TYPE } from '../../constants/entityTypes';\nimport { getControlButtonDisable } from '../../utils/draftHelpers';\nimport { addDivider } from '../../utils/draftModifiers';\nimport keyCode from '../../constants/keyCode';\nimport { ATOMIC_BLOCK_TYPE } from '../../constants/blockTypes';\n\nconst createDividerPlugin = ({ decorator }: any): any => {\n  // @ts-ignore\n  const pluginMethods: PluginMethods = {};\n  const dividerComponent = _.isFunction(decorator) ? decorator(Divider) : Divider;\n\n  return {\n    initialize(t: PluginMethods) {\n      Object.assign(pluginMethods, t);\n    },\n    keyBindingFn(e: KeyboardEvent) {\n      // ⌘ + ⇧ + D\n      if (KeyBindingUtil.hasCommandModifier(e) && e.shiftKey && e.keyCode === keyCode.D) {\n        return 'insert-divider';\n      }\n      return undefined;\n    },\n    handleCommand(command: string): DraftHandleValue {\n      const { getEditorState, setEditorState } = pluginMethods;\n      const editorState = getEditorState();\n      const { entityDisabled } = getControlButtonDisable(editorState);\n\n      // disable时不进行任何操作\n      if (entityDisabled) {\n        return 'not-handled';\n      }\n\n      if (command === 'insert-divider') {\n        const newEditorState = addDivider(editorState);\n        if (newEditorState) {\n          setEditorState(newEditorState);\n        }\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n    blockRendererFn: (block: ContentBlock, { getEditorState }: PluginMethods) => {\n      if (block.getType() === ATOMIC_BLOCK_TYPE) {\n        const contentState = getEditorState().getCurrentContent();\n        const entityKey = block.getEntityAt(0);\n        if (!entityKey) {\n          return null;\n        }\n        const entityType = contentState.getEntity(entityKey).getType();\n        if (entityType === DIVIDER_ENTITY_TYPE) {\n          return {\n            component: dividerComponent,\n            editable: false,\n          };\n        }\n        return null;\n      }\n      return null;\n    },\n  };\n};\n\nexport default createDividerPlugin;\n","import * as React from 'react';\nimport { EditorState, ContentState } from 'draft-js';\nimport './Link.scss';\n\ninterface LinkProps {\n  entityKey: string;\n  editorState: EditorState;\n  contentState: ContentState;\n  decoratedText: string;\n}\n\nexport default class Link extends React.PureComponent<LinkProps> {\n  getEntity = () => {\n    const { contentState, entityKey } = this.props;\n    return contentState.getEntity(entityKey);\n  };\n\n  getData = () => {\n    const entity = this.getEntity();\n    return entity.getData();\n  };\n\n  render() {\n    const { children } = this.props;\n    const entityData = this.getData();\n    return (\n      <a className={'editor-link'} href={entityData.url} target=\"_blank\" rel=\"noreferrer noopener\">\n        {children}\n      </a>\n    );\n  }\n}\n","import * as React from 'react';\nimport { CharacterMetadata, ContentState, ContentBlock, KeyBindingUtil } from 'draft-js';\nimport Link from './Link';\nimport { LINK_ENTITY_TYPE } from '../../constants/entityTypes';\nimport keyCode from '../../constants/keyCode';\n\nexport const linkStrategy = (\n  contentBlock: ContentBlock,\n  callback: (start: number, end: number) => void,\n  contentState: ContentState,\n): void => {\n  contentBlock.findEntityRanges((character: CharacterMetadata) => {\n    const entityKey = character.getEntity();\n    return entityKey !== null && contentState.getEntity(entityKey).getType() === LINK_ENTITY_TYPE;\n  }, callback);\n};\n\nconst linkPlugin = (config = {}): any => {\n  return {\n    decorators: [\n      {\n        strategy: linkStrategy,\n        component(props: any) {\n          return <Link {...props}/>;\n        },\n      },\n    ],\n    keyBindingFn(e: React.KeyboardEvent) {\n      // ⌘ + K\n      if (KeyBindingUtil.hasCommandModifier(e) && !e.shiftKey && e.keyCode === keyCode.K) {\n        return 'insert-link';\n      }\n      return undefined;\n    },\n  };\n};\n\nexport default linkPlugin;\n","import * as React from 'react';\nimport withPortal from '../../HOC/withPortal';\n\ninterface ImageCaptionInputProps {\n  inputRef: React.LegacyRef<HTMLTextAreaElement>;\n  position: object;\n  value: string;\n  onChange: React.ChangeEventHandler;\n  onBlur: React.FocusEventHandler;\n  onKeyDown: React.KeyboardEventHandler;\n}\n\n@withPortal(() => {\n  const container = document.createElement('div');\n  container.className = 'image-caption-root';\n  document.body.appendChild(container);\n  return container;\n})\nexport default class ImageCaptionInput extends React.PureComponent<ImageCaptionInputProps> {\n  render() {\n    const { value, position, inputRef, onBlur, onChange, onKeyDown } = this.props;\n\n    return (\n      <div className={'editor-image-caption-input'} style={position}>\n        <textarea\n          ref={inputRef}\n          value={value}\n          onChange={onChange}\n          onBlur={onBlur}\n          onKeyDown={onKeyDown}\n        />\n      </div>\n    );\n  }\n}\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport * as React from 'react';\nimport { ContentBlock, ContentState, EditorState, SelectionState } from 'draft-js';\nimport classNames from 'classnames';\nimport ImageCaptionInput from './ImageCaptionInput';\nimport withBlockProps from '../../HOC/withBlockProps';\nimport withEditorState from '../../HOC/withEditorState';\nimport keyCode from '../../constants/keyCode';\nimport { editImage } from '../../utils/draftModifiers';\n\nconst CAPTION_MIN_HEIGHT = 21;\n\ninterface ImageProps {\n  block: ContentBlock;\n  contentState: ContentState;\n  className: string;\n  data: ImageEntityData;\n  isFocused: boolean;\n  blockKey: string;\n  entityKey: string;\n  selection: SelectionState;\n  onClick: React.MouseEventHandler;\n  getEditorState: () => EditorState;\n  setEditorState: (editorState: EditorState) => void;\n  setReadOnly: (readOnly: boolean) => void;\n}\n\ninterface CaptionPosition {\n  width?: number;\n  height?: number;\n  top?: number;\n  left?: number;\n}\n\ninterface ImageState {\n  isCaptionEditing: boolean;\n  captionInputValue: string;\n  captionPosition: CaptionPosition;\n}\n\n@withBlockProps\n@withEditorState\nexport default class Image extends React.PureComponent<ImageProps, ImageState> {\n  private caption: HTMLElement | null;\n\n  private captionInput: HTMLTextAreaElement | null;\n\n  constructor(props: ImageProps) {\n    super(props);\n    this.state = {\n      isCaptionEditing: false,\n      captionInputValue: this.props.data.caption || '',\n      captionPosition: {},\n    };\n    this.caption = null;\n    this.captionInput = null;\n  }\n\n  getPosition = (): CaptionPosition => {\n    const captionElement = this.caption as HTMLElement;\n    const { width, height, top, left } = captionElement.getBoundingClientRect();\n    return {\n      width,\n      height,\n      top: top + window.pageYOffset,\n      left: left + window.pageXOffset,\n    };\n  };\n\n  adjustCaptionHeight = () => {\n    const captionInputElement = this.captionInput as HTMLTextAreaElement;\n    const captionElement = this.caption as HTMLElement;\n    const e = Math.max(captionInputElement.scrollHeight, CAPTION_MIN_HEIGHT);\n    captionElement.style.height = `${e}px`;\n    captionInputElement.style.height = `${e}px`;\n  };\n\n  // 开始编辑caption\n  startEditCaption = () => {\n    this.props.setReadOnly(true);\n    const {\n      data: { caption = '' },\n    } = this.props;\n    this.setState(\n      {\n        isCaptionEditing: true,\n        captionPosition: this.getPosition(),\n        captionInputValue: caption,\n      },\n      () => {\n        requestAnimationFrame(() => {\n          const captionInputElement = this.captionInput as HTMLTextAreaElement;\n          captionInputElement.focus();\n          captionInputElement.select();\n          requestAnimationFrame(() => {\n            this.setState({\n              captionPosition: this.getPosition(),\n            });\n          });\n        });\n      },\n    );\n  };\n\n  // 编辑caption\n  editCaption = () => {\n    const captionInputElement = this.captionInput as HTMLTextAreaElement;\n    const { value } = captionInputElement;\n    this.adjustCaptionHeight();\n    this.setState({\n      captionInputValue: value,\n    });\n  };\n\n  /**\n   * 结束编辑caption\n   * @param save {boolean} 是否保存改动\n   * @param focus {boolean} 是否focus下一个block\n   */\n  endEditCaption = ({ save = true, focus = false } = {}) => {\n    this.props.setReadOnly(false);\n    (this.caption as HTMLElement).style.height = null; // 清除caption的height值\n    if (save) {\n      const { getEditorState, setEditorState, blockKey, entityKey } = this.props;\n      const { captionInputValue } = this.state;\n      const editorState = getEditorState();\n      let newEditorState = editImage(editorState, entityKey, {\n        caption: captionInputValue,\n      });\n      if (focus) {\n        const contentState = newEditorState.getCurrentContent();\n        const nextBlockKey = contentState.getKeyAfter(blockKey);\n        if (nextBlockKey) {\n          const nextBlock = contentState.getBlockForKey(nextBlockKey);\n          const nextBlockLength = nextBlock.getLength();\n          newEditorState = EditorState.forceSelection(\n            newEditorState,\n            new SelectionState({\n              anchorKey: nextBlockKey,\n              anchorOffset: nextBlockLength,\n              focusKey: nextBlockKey,\n              focusOffset: nextBlockLength,\n              hasFocus: true,\n            }),\n          );\n        }\n      }\n      setEditorState(newEditorState);\n    }\n    this.setState({\n      isCaptionEditing: false,\n    });\n  };\n\n  handleCaptionClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    this.startEditCaption();\n  };\n\n  handleCaptionInputBlur = () => {\n    this.endEditCaption();\n  };\n\n  handleCaptionInputKeyDown = (e: React.KeyboardEvent) => {\n    const pressEnter = e.keyCode === keyCode.ENTER;\n    const pressESC = e.keyCode === keyCode.ESC;\n    if (pressEnter || pressESC) {\n      e.preventDefault();\n      // 按下esc则取消编辑，按下enter修改图片caption，并自动focus\n      this.endEditCaption({\n        save: pressEnter,\n        focus: pressEnter,\n      });\n    }\n  };\n\n  render() {\n    const {\n      className,\n      data: { src, caption = '' },\n      isFocused,\n    } = this.props;\n    const { isCaptionEditing, captionInputValue, captionPosition } = this.state;\n\n    const imageClass = classNames(className, 'editor-image-entity');\n    const captionClass = classNames('editor-image-caption', {\n      'editor-image-caption-editing': isCaptionEditing,\n      'editor-image-caption-is-placeholder': !caption,\n    });\n\n    return (\n      <div role=\"figure\" className=\"editor-image-package\">\n        <img onClick={this.props.onClick} className={imageClass} src={src} alt={caption}/>\n        {(isFocused || isCaptionEditing || caption) && (\n          <figcaption\n            className={captionClass}\n            ref={(e) => {\n              this.caption = e;\n            }}\n            onClick={this.handleCaptionClick}\n          >\n            {caption || '添加图片说明'}\n          </figcaption>\n        )}\n        {isCaptionEditing && (\n          <ImageCaptionInput\n            inputRef={(e) => {\n              this.captionInput = e;\n            }}\n            position={captionPosition}\n            value={captionInputValue}\n            onChange={this.editCaption}\n            onBlur={this.handleCaptionInputBlur}\n            onKeyDown={this.handleCaptionInputKeyDown}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { getComponentName } from '../utils/reactUtils';\n\n// 在blockRendererFn中，将blockProps全部传入组件\nexport default (WrapperComponent: React.ComponentClass<Merge<any, {}>>): any => {\n  return class withBlockProps extends React.PureComponent<Merge<any, {}>> {\n    static displayName = `withBlockProps(${getComponentName(WrapperComponent)})`;\n\n    render() {\n      const { blockProps } = this.props;\n      return <WrapperComponent {...this.props} {...blockProps}/>;\n    }\n  };\n};\n","import { composeDecorators } from 'draft-js-plugins-editor';\nimport createFocusPlugin from 'draft-js-focus-plugin';\n// common plugins\nimport createBeforeInputPlugin from '../plugins/common/beforeInputPlugin';\nimport createKeyBindingPlugin from '../plugins/common/keyBindingPlugin';\nimport createCommandReturnPlugin from '../plugins/common/commandReturnPlugin';\nimport createShiftReturnPlugin from '../plugins/common/shiftReturnPlugin';\nimport createNormalReturnPlugin from '../plugins/common/normalReturnPlugin';\nimport createHeaderPlugin from '../plugins/common/headerPlugin';\nimport createCodeBlockPlugin from '../plugins/common/codeBlockPlugin';\nimport createClearFormatPlugin from '../plugins/common/clearFormatPlugin';\n// entity plugins\nimport createDividerPlugin from '../plugins/Divider/DividerPlugin';\nimport createLinkPlugin from '../plugins/Link/LinkPlugin';\nimport createImagePlugin from '../plugins/Image/ImagePlugin';\n\nconst createPlugins = (): Array<any> => {\n  // entity plugin\n  const focusPlugin = createFocusPlugin({\n    theme: {\n      focused: 'focus-plugin-focused',\n      unfocused: 'focus-plugin-unfocused',\n    },\n  });\n  const focusDecorator = composeDecorators(focusPlugin.decorator);\n  const dividerPlugin = createDividerPlugin({\n    decorator: focusDecorator,\n  });\n  const linkPlugin = createLinkPlugin();\n  const imagePlugin = createImagePlugin({\n    decorator: focusDecorator,\n  });\n\n  // common plugins\n  const beforeInputPlugin = createBeforeInputPlugin();\n  const keyBindingPlugin = createKeyBindingPlugin();\n  const commandReturnPlugin = createCommandReturnPlugin();\n  const shiftReturnPlugin = createShiftReturnPlugin();\n  const normalReturnPlugin = createNormalReturnPlugin();\n  const headerPlugin = createHeaderPlugin();\n  const codeBlockPlugin = createCodeBlockPlugin();\n  const clearFormatPlugin = createClearFormatPlugin();\n\n  /**\n   * 这里要注意plugin的顺序\n   * 所有插件的函数都运行在Editor的同名函数之后，并插件顺序依次执行\n   */\n  return [\n    ...[focusPlugin, dividerPlugin, linkPlugin, imagePlugin],\n    ...[\n      beforeInputPlugin,\n      commandReturnPlugin,\n      shiftReturnPlugin,\n      normalReturnPlugin,\n      headerPlugin,\n      codeBlockPlugin,\n      clearFormatPlugin,\n    ],\n    ...[keyBindingPlugin], // keyBindingPlugin 需放在最后\n  ];\n};\n\nexport default createPlugins;\n","import * as _ from 'lodash';\nimport { KeyboardEvent } from 'react';\nimport { KeyBindingUtil, ContentBlock } from 'draft-js';\nimport Image from './Image';\nimport './Image.scss';\nimport keyCode from '../../constants/keyCode';\nimport { ATOMIC_BLOCK_TYPE } from '../../constants/blockTypes';\nimport { IMAGE_ENTITY_TYPE } from '../../constants/entityTypes';\n\nexport default function createImagePlugin({ decorator }: any): any {\n  // @ts-ignore\n  const pluginMethods: PluginMethods = {};\n  const ImageComponent = _.isFunction(decorator) ? decorator(Image) : Image;\n\n  return {\n    initialize(t: PluginMethods) {\n      Object.assign(pluginMethods, t);\n    },\n    keyBindingFn(e: KeyboardEvent) {\n      // ⌘ + ⇧ + I\n      if (KeyBindingUtil.hasCommandModifier(e) && e.shiftKey && e.keyCode === keyCode.I) {\n        return 'insert-image';\n      }\n      return undefined;\n    },\n    blockRendererFn: (block: ContentBlock, { getEditorState, setEditorState }: PluginMethods) => {\n      if (block.getType() === ATOMIC_BLOCK_TYPE) {\n        const contentState = getEditorState().getCurrentContent();\n        const entityKey = block.getEntityAt(0);\n        if (!entityKey) {\n          return null;\n        }\n        const entity = contentState.getEntity(entityKey);\n        const entityType = entity.getType();\n        if (entityType === IMAGE_ENTITY_TYPE) {\n          const data = entity.getData();\n          return {\n            component: ImageComponent,\n            editable: false,\n            props: {\n              data,\n              blockKey: block.getKey(),\n              entityKey,\n              getEditorState,\n              setEditorState,\n            },\n          };\n        }\n        return null;\n      }\n      return null;\n    },\n  };\n}\n","import { KeyboardEvent } from 'react';\nimport { EditorState, KeyBindingUtil } from 'draft-js';\nimport { isInBlockEnd, getCurrentBlock } from '../../utils/draftHelpers';\nimport { insertUnstyledParagraph } from '../../utils/draftModifiers';\n\nexport default () => {\n  return {\n    // 只要在block的末尾，按下cmd + enter插入unstyled block\n    handleReturn(e: KeyboardEvent, editorState: EditorState, { setEditorState }: PluginMethods) {\n      const selection = editorState.getSelection();\n      const block = getCurrentBlock(editorState);\n\n      if (isInBlockEnd(block, selection)) {\n        if (KeyBindingUtil.hasCommandModifier(e)) {\n          setEditorState(insertUnstyledParagraph(editorState));\n          return 'handled';\n        }\n      }\n      return 'not-handled';\n    },\n  };\n};\n","import { KeyboardEvent } from 'react';\nimport { EditorState, DraftHandleValue, RichUtils } from 'draft-js';\n\nexport default () => {\n  return {\n    handleReturn(\n      e: KeyboardEvent,\n      editorState: EditorState,\n      { setEditorState }: PluginMethods,\n    ): DraftHandleValue {\n      // 按下 shift + enter, 添加`\\n`换行\n      if (e.shiftKey) {\n        setEditorState(RichUtils.insertSoftNewline(editorState));\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n  };\n};\n","import { KeyboardEvent } from 'react';\nimport { EditorState, DraftHandleValue } from 'draft-js';\nimport { getCurrentBlock } from '../../utils/draftHelpers';\nimport { insertUnstyledParagraph, resetBlockType } from '../../utils/draftModifiers';\nimport { ATOMIC_BLOCK_TYPE } from '../../constants/blockTypes';\n\nexport default () => {\n  return {\n    handleReturn(\n      e: KeyboardEvent,\n      editorState: EditorState,\n      { setEditorState }: PluginMethods,\n    ): DraftHandleValue {\n      let handleValue: DraftHandleValue = 'not-handled';\n      const block = getCurrentBlock(editorState);\n      const blockType = block.getType();\n\n      // 用于处理单独敲下回车的情况\n      if (!e.altKey && !e.metaKey && !e.ctrlKey) {\n        // 如果是atomic，则插入新的一行\n        if (blockType === ATOMIC_BLOCK_TYPE) {\n          setEditorState(insertUnstyledParagraph(editorState));\n          handleValue = 'handled';\n        }\n\n        // 如果在<blockquote>、<ul>、<ol>中未输入任何文字时敲下回车，则reset成unstyled block\n        if (block.getLength() === 0) {\n          if (['blockquote', 'unordered-list-item', 'ordered-list-item'].includes(blockType)) {\n            setEditorState(resetBlockType(editorState, 'unstyled'));\n            handleValue = 'handled';\n          }\n        }\n      }\n      return handleValue;\n    },\n  };\n};\n","import * as React from 'react';\nimport { EditorState, DraftHandleValue } from 'draft-js';\nimport { Map } from 'immutable';\nimport { isInBlockEnd } from '../../utils/draftHelpers';\nimport { insertUnstyledParagraph } from '../../utils/draftModifiers';\n\nexport default () => {\n  return {\n    blockRenderMap: Map({\n      // 文章中header level最小为4\n      'header-four': {\n        element: 'h4',\n        aliasedElements: ['h5', 'h6'], // 复制的h5、h6标签，会被映射成header-four draft block\n      },\n      'header-five': {},\n      'header-six': {},\n    }),\n    handleReturn(\n      e: React.KeyboardEvent,\n      editorState: EditorState,\n      { setEditorState }: PluginMethods,\n    ): DraftHandleValue {\n      const selection = editorState.getSelection();\n      const block = editorState.getCurrentContent().getBlockForKey(selection.getStartKey());\n\n      if (isInBlockEnd(block, selection)) {\n        const blockType = block.getType();\n        if (blockType.startsWith('header-')) {\n          const newEditorState = insertUnstyledParagraph(editorState);\n          if (newEditorState) {\n            setEditorState(newEditorState);\n            return 'handled';\n          }\n        }\n      }\n      return 'not-handled';\n    },\n  };\n};\n","import * as React from 'react';\nimport { EditorState, Modifier, RichUtils, ContentBlock, DraftHandleValue } from 'draft-js';\nimport { Map } from 'immutable';\n\nexport default () => {\n  return {\n    blockRenderMap: Map({\n      'code-block': {\n        element: 'code',\n        wrapper: <pre className={'public-DraftStyleDefault-pre'}/>,\n      },\n    }),\n    blockStyleFn(block: ContentBlock) {\n      const type = block.getType();\n      if (type === 'code-block') {\n        return 'editor-code-block';\n      }\n      return null;\n    },\n    handlePastedText(\n      text: string,\n      html: string,\n      editorState: EditorState,\n      { setEditorState }: PluginMethods,\n    ): DraftHandleValue {\n      const contentState = editorState.getCurrentContent();\n      const selection = editorState.getSelection();\n      const blockType = RichUtils.getCurrentBlockType(editorState);\n      // 代码块内直接粘贴文本，移除inline style\n      if (blockType === 'code-block') {\n        const newContentState = Modifier.replaceText(contentState, selection, text);\n        setEditorState(EditorState.push(editorState, newContentState, 'insert-characters'));\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n    // 在code-block内，按下回车只有换行操作\n    handleReturn(\n      e: React.KeyboardEvent,\n      editorState: EditorState,\n      { setEditorState }: PluginMethods,\n    ): DraftHandleValue {\n      const blockType = RichUtils.getCurrentBlockType(editorState);\n      if (blockType === 'code-block') {\n        setEditorState(RichUtils.insertSoftNewline(editorState));\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n  };\n};\n","import { KeyboardEvent } from 'react';\nimport { KeyBindingUtil, DraftHandleValue } from 'draft-js';\nimport { clearFormat } from '../../utils/draftModifiers';\nimport keyCode from '../../constants/keyCode';\n\nexport default () => {\n  // @ts-ignore\n  const pluginMethods: PluginMethods = {};\n\n  return {\n    initialize(t: PluginMethods) {\n      Object.assign(pluginMethods, t);\n    },\n    keyBindingFn(e: KeyboardEvent) {\n      // ⌘ + ⇧ + L\n      if (KeyBindingUtil.hasCommandModifier(e) && e.shiftKey && e.keyCode === keyCode.L) {\n        return 'clear-format';\n      }\n      // 这里绝对不能return null，否则后续的plugin的bindingFn会被阻止\n      return undefined;\n    },\n    handleCommand(command: string): DraftHandleValue {\n      const { getEditorState, setEditorState } = pluginMethods;\n      const editorState = getEditorState();\n\n      if (command === 'clear-format') {\n        const newEditorState = clearFormat(editorState);\n        if (newEditorState) {\n          setEditorState(newEditorState);\n        }\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n  };\n};\n","import * as React from 'react';\nimport { Button } from 'antd';\nimport EditorWithPlugin from 'draft-js-plugins-editor';\nimport { convertToRaw, ContentBlock, Editor, EditorState, RichUtils } from 'draft-js';\nimport isEventHandled from 'draft-js/lib/isEventHandled';\nimport classNames from 'classnames';\nimport './MyEditor.scss';\nimport * as draftHelpers from '../../utils/draftHelpers';\nimport * as draftModifiers from '../../utils/draftModifiers';\nimport { contentStateToHtml, htmlToContentState } from '../../utils/draftConverter';\nimport { EditorStateContext } from '../../utils/context';\nimport EventEmitter from '../../utils/EventEmitter';\n// components\nimport EditorControlToolBar from '../EditorControl/EditorControlToolBar';\nimport LinkModal from '../Modal/LinkModal';\nimport LinkPopover from '../LinkPopover/LinkPopover';\n// plugins\nimport createPlugins from '../../utils/draftPlugins';\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: '#e6e6e6',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    padding: 2,\n    wordWrap: 'break-word',\n  },\n};\n\nconst blockStyleFn = (block: ContentBlock): any => {\n  switch (block.getType()) {\n    case 'unstyled':\n      return 'editor-unstyled';\n    case 'blockquote':\n      return 'editor-blockquote';\n    default:\n      return null;\n  }\n};\n\ninterface MyEditorState {\n  editorState: EditorState;\n  currentLinkEntityKey: string | null;\n  linkModalVisible: boolean;\n  readOnly: boolean;\n}\n\nclass MyEditor extends React.PureComponent<{}, MyEditorState> {\n  emitter: EventEmitter;\n\n  editor: React.RefObject<Editor>;\n\n  plugins: any[];\n\n  constructor(props: {}) {\n    super(props);\n    const html = '<h2>测试标题</h2><ul><li>111</li><li>222</li></ul><p>test</p>';\n    const contentState = htmlToContentState(html);\n    this.state = {\n      editorState: EditorState.createWithContent(contentState),\n      currentLinkEntityKey: null,\n      linkModalVisible: false,\n      readOnly: false,\n    };\n    this.emitter = new EventEmitter();\n    this.editor = React.createRef();\n    this.plugins = createPlugins();\n  }\n\n  componentDidMount() {\n    // init event bus\n    this.emitter.on('handleEditorWithCommand', this.handleKeyCommand);\n  }\n\n  componentWillUnmount() {\n    this.emitter.off('handleEditorWithCommand', this.handleKeyCommand);\n  }\n\n  focus = () => {\n    (this.editor.current as Editor).focus();\n  };\n\n  setReadOnly = (readOnly: boolean) => {\n    this.setState({\n      readOnly,\n    });\n  };\n\n  // draft-plugin-editor的onChange函数的第二个参数是一些辅助函数，并不是回调，故在只Editor组件上使用\n  onEditorChange = (editorState: EditorState) => {\n    const isEdit = draftHelpers.isCursorBetweenLink(editorState);\n    this.setState({\n      editorState,\n      currentLinkEntityKey: isEdit ? isEdit.entityKey : null,\n    });\n  };\n\n  // set editorState\n  handleChange = (editorState: EditorState, cb?: () => any) => {\n    const isEdit = draftHelpers.isCursorBetweenLink(editorState);\n    this.setState(\n      {\n        editorState,\n        currentLinkEntityKey: isEdit ? isEdit.entityKey : null,\n      },\n      cb,\n    );\n  };\n\n  onTab = (e: React.KeyboardEvent) => {\n    const { editorState } = this.state;\n    const newEditorState = RichUtils.onTab(e, editorState, 4);\n    if (newEditorState !== this.state.editorState) {\n      this.handleChange(newEditorState);\n    }\n    return null;\n  };\n\n  handleReturn = (e: React.KeyboardEvent) => {\n    const { editorState } = this.state;\n    // some code\n    return 'not-handled';\n  };\n\n  handleCommand = (command: string) => {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const plugin of this.plugins) {\n      if (plugin.handleCommand && isEventHandled(plugin.handleCommand(command))) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  handleKeyCommand = (command: string) => {\n    const { editorState } = this.state;\n    const { linkDisabled } = draftHelpers.getControlButtonDisable(editorState);\n\n    if (this.handleCommand(command)) {\n      return 'handled';\n    }\n    if (command === 'insert-link') {\n      // disable时不进行任何操作\n      if (linkDisabled) {\n        return 'not-handled';\n      }\n      this.openLinkModal();\n      return 'handled';\n    }\n    if (command === 'insert-image') {\n      this.addImage();\n      return 'handled';\n    }\n    if (command === 'save') {\n      return 'handled';\n    }\n    return 'not-handled';\n  };\n\n  openLinkModal = () => {\n    this.setState({\n      linkModalVisible: true,\n    });\n  };\n\n  closeLinkModal = (e: React.MouseEvent, focusAfterClose = false) => {\n    this.setState(\n      {\n        linkModalVisible: false,\n      },\n      () => {\n        if (focusAfterClose) {\n          this.focus();\n        }\n      },\n    );\n  };\n\n  addImage = () => {\n    const { editorState } = this.state;\n    const newEditorState = draftModifiers.addImage(editorState, {\n      src: 'https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=2810627290,1080409091&fm=58',\n      caption: 'bilibili',\n    });\n    this.handleChange(newEditorState);\n  };\n\n  addOrEditLink = (e: React.MouseEvent, { title, url }: LinkEntityData) => {\n    e.preventDefault();\n    let newEditorState;\n    const { editorState, currentLinkEntityKey: entityKey } = this.state;\n    // 如果entityKey为null，则添加link，否则是修改link\n    if (entityKey === null) {\n      newEditorState = draftModifiers.addLink(editorState, { title, url });\n    } else {\n      const content = editorState.getCurrentContent();\n      const selection = editorState.getSelection();\n      const blockKey = content.getBlockForKey(selection.getFocusKey()).getKey();\n      newEditorState = draftModifiers.editLink(editorState, {\n        title,\n        url,\n        blockKey,\n        entityKey,\n      });\n    }\n    // setState，并在添加链接后，关闭modal，再获取焦点\n    this.handleChange(newEditorState, () => {\n      this.closeLinkModal(e, true);\n    });\n  };\n\n  removeLink = (blockKey: string, entityKey: string) => {\n    const { editorState } = this.state;\n    const newEditorState = draftModifiers.removeLink(editorState, blockKey, entityKey);\n    this.handleChange(newEditorState);\n  };\n\n  showBlockTypeAndInlineStyle = () => {\n    const { editorState } = this.state;\n    const selection = editorState.getSelection();\n    const contentBlock = editorState.getCurrentContent().getBlockForKey(selection.getStartKey());\n    console.log('contentBlock:', contentBlock);\n    console.log('selection:', selection);\n    console.log('inlineStyle:', editorState.getCurrentInlineStyle().toJS());\n  };\n\n  logState = () => {\n    const contentState = this.state.editorState.getCurrentContent();\n    console.log('contentState:', contentState);\n    console.log('rawContentState:', convertToRaw(contentState));\n    console.log('html:', contentStateToHtml(contentState));\n  };\n\n  render() {\n    const { editorState, readOnly, linkModalVisible, currentLinkEntityKey: entityKey } = this.state;\n    const linkEntityInfo = draftHelpers.isCursorBetweenLink(editorState);\n    const linkModalValue = draftHelpers.getLinkModalDefaultValue(editorState, entityKey as string);\n    const contentState = editorState.getCurrentContent();\n    const containerClass = classNames({\n      'editor-container': true,\n      // 当有block内容填充时，隐藏placeholder\n      'editor-container-hide-placeholder':\n        !contentState.hasText() && contentState.getFirstBlock().getType() !== 'unstyled',\n    });\n\n    return (\n      <EditorStateContext.Provider\n        value={{\n          editorState,\n          readOnly,\n          setReadOnly: this.setReadOnly,\n        }}\n      >\n        <React.Fragment>\n          <div className={'editor-root'}>\n            <EditorControlToolBar editorState={editorState} onCommand={this.handleKeyCommand}/>\n            <div role={'textbox'} tabIndex={0} className={containerClass} onClick={this.focus}>\n              <EditorWithPlugin\n                editorState={editorState}\n                readOnly={readOnly}\n                blockStyleFn={blockStyleFn}\n                customStyleMap={styleMap}\n                placeholder={'请输入正文'}\n                ref={this.editor}\n                spellCheck={false}\n                handleReturn={this.handleReturn}\n                handleKeyCommand={this.handleKeyCommand}\n                onChange={this.onEditorChange}\n                onTab={this.onTab}\n                plugins={this.plugins}\n              />\n            </div>\n          </div>\n          {linkEntityInfo && (\n            <LinkPopover\n              editorState={editorState}\n              url={linkEntityInfo.url}\n              blockKey={linkEntityInfo.blockKey}\n              entityKey={linkEntityInfo.entityKey}\n              onEditLink={this.openLinkModal}\n              onRemoveLink={this.removeLink}\n            />\n          )}\n          <LinkModal\n            {...linkModalValue}\n            visible={linkModalVisible}\n            onOk={this.addOrEditLink}\n            onCancel={this.closeLinkModal}\n          />\n          <p style={{ margin: 12, marginLeft: 0 }}>\n            <Button type={'primary'} onClick={this.showBlockTypeAndInlineStyle}>\n              check status\n            </Button>\n            <Button style={{ marginLeft: 8 }} type={'danger'} onClick={this.logState}>\n              log state\n            </Button>\n          </p>\n        </React.Fragment>\n      </EditorStateContext.Provider>\n    );\n  }\n}\n\nexport default MyEditor;\n"],"sourceRoot":""}